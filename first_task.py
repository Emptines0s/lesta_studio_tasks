# В исходном варианте представлен способ основанный на чисто математическом определении четности числа,
# через остаток от деления. В моём понимании поставленной задачи, другой вариант по сути работы, может быть разным,
# в зависимости от требуемой фундаментальности различий по сути работы функции. Я представлю два варианта:
# 1) Гибридный способ который при анализе числа будет использовать другой тип данных str и его возможности.
# 2) Вероятно подрузамевавшийся, вариант с анализом четности числа при помощи побитовых операторов, т.к. двоичное
# представление числа 1 это 1, то при использовании побитового И мы получим результат либо 1 либо 0
# Функция с применением str преймуществ не имеет (это так, больше для разнообразия), а вот побитовые операции займут
# меньше времени на работу, чем оператор %

# Способ из примера
def f1(num):
    return num % 2 == 0


# Гибридный способ с применением мат. операций, и конвертацией в str тип данных для использования split
def f2(num):
    return str(num / 2).split('.')[1] == '0'


# Способ с использование побитового оператора И
def f3(num):
    return num & 1 == 0


for i in range(10):
    print(i)
    print(f1(i))
    print(f2(i))
    print(f3(i))
